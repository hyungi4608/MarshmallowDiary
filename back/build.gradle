buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'

    // for opensource license
//    id 'com.github.jk1.dependency-license-report' version '2.0'
    id 'com.github.jk1.dependency-license-report' version '1.17'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'junit:junit:4.13.2'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'junit:junit:4.13.2'
    implementation group: 'io.jsonwebtoken', name:'jjwt', version:'0.9.1'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    implementation 'org.projectlombok:lombok:1.18.24'

    implementation group: 'org.javassist', name:'javassist', version: '3.15.0-GA'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-gradle-plugin:2.7.5'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-starter-data-jpa'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testAnnotationProcessor('org.projectlombok:lombok')

    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    // https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
    implementation 'commons-fileupload:commons-fileupload:1.4'
}

//tasks.named('test') {
//    useJUnitPlatform()
//}

test {
    useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

// build.gradle
bootJar {
    mainClass = 'com.marshmallow.MarshmallowApplication'
    archivesBaseName = 'marshmallow'
    archiveVersion = '0.0.1'
    archiveFileName = 'marshmallow.jar'
    layered {
        includeLayerTools = true
    }
}


licenseReport {
    // 라이센스 고지 파일을 반환할 경로 default는 $projectDir/reports/dependency-license
    outputDir = "$projectDir/build/licenses"

    // markdown 생성
    // renderers = [new InventoryMarkdownReportRenderer()]

    // html 생성
    // renderers = [new InventoryHtmlReportRenderer()]

    // xml 생성
    // renderers = [new XmlReportRenderer()]

    // 보고서에 첫 번째 수준 종속성만 표기
    // filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
}